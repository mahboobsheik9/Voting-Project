# Step by Step Implementation of Voting Project using Azure CI , ArgoCD and Kubernetes

Project Components:
1.Microservices : Vote,Worker,Result
2.Databases : Postgress SQL
3.In-memory Datastores: Redis

CD Process steps:
1. Create Kubernetes cluster and login 

Enter these commands in your Gitbash or CLI
--> az aks get-credentials --name azuredevops --overwrite-existing-group yourresourcegroup
--> kubectl get pods (there should not be any pods available)

2. Install ArgoCD into the Kubernetes cluster
--> Enter these commands in your Gitbash or CLI
--> kubectl create namespace argocd
--> kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
--> All the ArgoCD resources will be installed 
Check if all the ArgoCD resources are installed , run below command
--> kubectl get pods -n argocd  (make sure are the pods are running) 


3. Configure ArgoCD within the Kubernetes cluster

--> In Gitops approach there will be a Git repository you will place your kubernetes manifest which are available in K8s specifications folder in our scenario
--> ArgoCD will continuous monitor this repository and deploy on the K8s cluster
--> We need to connect the ArgoCD to our GitRepo , firstly you need to login to ArgoCD user and password through K8s, run below commands 
--> kubectl get secrets
--> kubectl get secrets -n argocd
--> kubectl edit secret argocd-initial-admin-secret -n argocd

--> We need to get the secret here but they are base64 encoded hence we need to decode the secret, run below command
	echo enterthesecret | base64 --decode (your decoded secret will be the password and user will be admin)
--> To access ArgoCD on your browser in the format "nodeip:nodeport" ,we need to expose the ArgoCD in the Nodeport mode, run below commands
	kubectl get svc -n argocd

	kubectl edit svc argocd-server -n argocd , here edit the type from ClusterIP to Nodeport

--> Copy the Nodeport IP in http from this command : kubectl get svc -n argocd  
--> Goto Virtual machines scale sets , click on nodepools >> instances >> networking >> inbound port rules >> add inbound security rule (Keeping all things as default) 
--> Goto your browser and type nodeip:nodeport to access the ArgoCD website and sign-in to the console

--> Here you need to connect your AzureRepo to your ArgoCD providing read permission to it for that create PAT (Personal Access Token) in AzureDevops portal
--> Go back to ArgoCD >> Settings >> Repositories >> keep the project as 'default' >> copy the repository url from AzureDevops and replace the PAT with your Orgname in Org-name@dev.azure.com/argoproj/argo-cd/stable/manifests/install
 


--> ArgoCD has been successfully connected to your repository , then we have to connect the K8s cluster to ArgoCD

--> Goto ArgoCD >> click on Connect Apps >> add application name >> set Sync Policy to Automatic (to automate the CICD process) 
--> Here add Path : k8s-specifications (use file in your repository path for specific file you want to deploy in K8s) , add Destination namespace where you want to deploy the K8s manifest files
--> Click on create and you have connected your K8s manifest files to ArgoCD and the whole ArgoCD configuration is completed

Generally if you make any change in the code it should trigger the pipeline and a new image is created, pushed and updated in the deployment yaml file automatically.



4. Write the Update script which is in shell script to update the repository with a new image

--> Create a folder in your repository in AzureDevops as 'scripts' and create file with name 'updateK8sManifests.sh'

Copy and paste the Shellscript written to update the repository with a new image everytime the update script is executed through CICD pipeline   
Update the Repo url with the PAT(personal access token) 
**In your organisation's perspective storing the access token in the Git repository is not safe so we should pass another CLI argument from the CI Pipeline and CI can read it from the environment variables** 

Goto your vote pipeline and edit the yaml file to create a new stage as Update to add the shellscript
In the Update stage settings add a shellscript task and on the right side add your script path and Arguments (<microservice> $imageRepository $tag)
The shellscript will update the deployment yaml file of that microservice in the repository with a new image whenever a new image is created
In your shellscript you have the below components:

# Run the script in a debug mode
set -x

# Set the repository URL
REPO_URL="https://<ACCESS-TOKEN>@dev.azure.com/<AZURE-DEVOPS-ORG-NAME>/voting-app/_git/voting-app"

# Clone the git repository into the /tmp directory
git clone "$REPO_URL" /tmp/temp_repo

# Make changes to the Kubernetes manifest file(s)
# For example, let's say you want to change the image tag in a deployment.yaml file
sed -i "s|image:.*|image: <ACR-REGISTRY-NAME>.azurecr.io/$2:$3|g" k8s-specifications/$1-deployment.yaml

# $1 - defines which microservice you are using 
# $2 - defines repository name 
# $3 - defines repository tag you are using for the deployment

# Add the modified files
git add .

# Commit the changes
git commit -m "Update Kubernetes manifest"

# Push the changes back to the repository
git push

# Cleanup: remove the temporary directory
rm -rf /tmp/temp_repo 

**Your Self-hosted agent should be running during all the process**

Run the CD Pipeline to update the microservice or app image in the deployment yaml file under the K8s manifest

Once the image is updated in the yaml file then it will take 3 mins to update the configuration in the ArgoCD

To reduce the reconciliation time use the below command in your CLI

kubectl edit cm argocd-cm -n argocd 
#INSERT
data:
 timeout.reconciliation: 10s
 
Refresh the ArgoCD console you will see the kubernetes pod is not running its because K8s is trying to pull the image from a private Azure Container Registry 
Here we use the concept of ImagePullSecrets. Run these commands in your CLI for creating a ACR ImagePullSecret.

kubectl create secret docker-registry <secret-name> \
    --namespace <namespace> \
    --docker-server=<container-registry-name>.azurecr.io \
    --docker-username=<service-principal-ID> \
    --docker-password=<service-principal-password>

Goto your deployment yaml file and edit , add ImagePullSecret as below

imagePullSecret:
 -name: <secret-name>

To verify the CICD Pipeline go to <microservice>/app.py and do some change in the code and then the pipeline will trigger automatically and deploy the app in the K8s cluster

#Check if the latest image is deployed on the K8s cluster
kubectl get deploy vote -o yaml 
#To check all the pods are running
kubectl get pods
#To access the application and check if the new changes are deployed in the app 
kubectl get svc (copy the port of your pod or app)
#To access the Nodeport service
kubectl get node -o wide (copy the external-ip-address)

Goto Azure portal >> VMSS (Virtual Machine Scale Sets) >> your nodepool >> Instances >> Networking >> add inbound port no 

Paste in your browser in the format <external-ip-address>:<portno>. Here you can see your changes in the application 

Hence you have implemented the CICD Pipeline for one microservice of your application in your organisation
